{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>SiteWatch is a command-line tool that allows for the monitoring of Islandora websites using tests specified in a CSV (or similar) file. The tool can be run manually through the command line or can be scheduled to run automatically using a cron job. Additionally, SiteWatch can be configured to send email notifications to multiple emails when a monitored website is down or when certain test cases fail. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Monitor Islandora websites using tests specified in a CSV file</li> <li>Run tests manually or automatically using a cron job</li> <li>Send email notifications to multiple emails when a monitored website is down or when certain test cases fail</li> <li>Intuitive, easy-to-use command-line interface</li> <li>Open source and free to use</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Within the <code>site_watch</code> directory, run the following command, providing the name of your configuration file (\"config.yml\" in this example):</p> <p><code>./site_watch config.yml</code></p> <p>Note</p> <p>If you're on Windows, you will likely need to run SiteWatch by explicitly invoking Python, e.g. <code>./site_watch config.yml</code> instead of using <code>./sitewatch</code> as illustrated above.</p> <p>If your configuration file is not in the same directory as the <code>sitewatch</code> script, use its absolute path, e.g.:</p> <p><code>./site_watch /path/to/config.yml</code></p> <p>SiteWatch will run every test in the input data file referenced in the configuration file, displaying a progress bar and the results of each test as it runs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to this documentation are welcome. If you have a suggestion, please open an issue on the SiteWatch issues page and tag your issue \"documentation\".</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#the-configuration-file","title":"The Configuration File","text":"<p>SiteWatch gets its first input from a configuration file whose path is passed to it as a command line argument. This file is a YAML file, and can be named anything you like, but it must have a <code>.yml</code> extension. For example, if your configuration file is named <code>my_config.yml</code>, you would run SiteWatch like this:</p> <pre><code>$ ./sitewatch my_config.yml\n</code></pre> <p>The configuration file contains all the information SiteWatch needs to run. It contains the location of the CSV-like file containing the tests that SiteWatch is to run, the email addresses of the people who are to receive the test results, and other information. For example, one of the the simplist configuration files might look like this:</p> <pre><code>csv: /path/to/test/csv\n</code></pre>"},{"location":"configuration/#required-configuration-settings","title":"Required Configuration Settings","text":""},{"location":"configuration/#input-source","title":"Input Source","text":"<p>Exactly one of the following settings must be present in the configuration file to tell SiteWatch where to find the tests to run: * <code>csv</code>: A path to a CSV file containing the tests to run. * <code>excel</code>: A path to an Excel file containing the tests to run. * <code>google_sheets</code>: A URL to a Google Sheets file containing the tests to run.</p>"},{"location":"configuration/#optional-configuration-settings","title":"Optional Configuration Settings","text":""},{"location":"configuration/#email-settings","title":"Email Settings","text":"<p>SiteWatch can send email notifications to one or more recipients when it finishes running. To enable this feature, the configuration file must include the following</p> <pre><code>email:\n  sender_name: &lt;The name to appear on the emails&gt;\n  sender_email: &lt;The email address to send from; must be an email this machine can send from&gt;\n  recipient_emails: \n    - &lt;email address 1&gt;\n    - &lt;email address 2&gt;\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7 or higher</li> <li>The latest Google Chrome and Chromedriver installed to the PATH (see Installing Chrome and Chromedriver on Linux or visit the Google Chrome and Chromedriver websites for instructions on installing these on other operating systems)</li> <li>The following Python libraries:<ul> <li>ruamel.yaml</li> <li>Requests</li> <li>openpyxl</li> <li>rich</li> <li>selenium</li> <li>colorama</li> <li>If you want to have these libraries automatically installed, you will need Python's setuptools</li> <li>Highly recommended: A Linux-based operating system (e.g. Ubuntu, Debian, Fedora, etc.)</li> </ul> </li> </ul>"},{"location":"installation/#installing-sitewatch","title":"Installing SiteWatch","text":"<p>Installation involves three steps:</p> <ol> <li>cloning the SiteWatch Github repo</li> <li>running <code>setup.py</code> to install the required Python libraries (listed above)</li> </ol>"},{"location":"installation/#step-1-cloning-the-sitewatch-repo","title":"Step 1: Cloning the SiteWatch Repo","text":"<p>In a terminal, run:</p> <p><code>git clone https://github.com/digitalutsc/site_watch.git</code></p> <p>This will create a directory named <code>site_watch</code> where you will run the <code>./sitewatch</code> command.</p>"},{"location":"installation/#step-2-running-setuppy-to-install-the-required-python-libraries","title":"Step 2: Running setup.py to Install the Required Python Libraries","text":"<p>For most users, the preferred place to install Python libraries is in the user directory. To do this, change into the \"site_watch\" directory created by cloning the repo, and run the following command:</p> <p><code>python3 setup.py install --user</code></p> <p>A less common mehtod is to install the required Python libraries into your computer's central Python environment. To do this, omit the <code>--user</code> (note: you must have administrator privileges on the computer to do this):</p> <p><code>sudo python3 setup.py install</code></p>"},{"location":"installation/#updating-sitewatch","title":"Updating SiteWatch","text":"<p>Since SiteWatch is under development, you will want to update it often. To do this, within the <code>site_watch</code> directory, run the following <code>git</code> command:</p> <p><code>git pull origin main</code></p> <p>After you pull in the latest changes using <code>git</code>, it's a good idea to rerun the setup tools in case new Python libraries have been added since you last ran the setup tools (same command as above):</p> <p><code>python3 setup.py install --user</code></p> <p>or if you originally installed the required Python libraries centrally, without the <code>--user</code> option (again, you will need administrator privileges on the machine):</p> <p><code>sudo python3 setup.py install</code></p>"},{"location":"installation/#installing-google-chrome-and-chromedriver-on-linux","title":"Installing Google Chrome and Chromedriver on Linux","text":"<p>SiteWatch uses Google Chrome and Chromedriver to run tests. You will need to install both of these on the machine where you will be running SiteWatch. </p> <p>To install Google Chrome, run the following in a terminal:</p> <pre><code>sudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt install wget -y\nsudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\nsudo apt -f install\nsudo rm google-chrome-stable_current_amd64.deb\n</code></pre> <p>To install Chromedriver, run the following in a terminal:</p> <pre><code>sudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get install unzip -y\nsudo apt-get install curl -y\nlatest_version=$(curl -sL https://chromedriver.chromium.org/downloads | grep -oP 'ChromeDriver \\K([0-9]+.[0-9]+.[0-9]+.[0-9]+)' | head -n 1)\ndownload_url=\"https://chromedriver.storage.googleapis.com/$latest_version/chromedriver_linux64.zip\"\ntemp_dir=$(mktemp -d)\nsudo curl -sL \"$download_url\" -o \"$temp_dir/chromedriver.zip\"\nsudo unzip \"$temp_dir/chromedriver.zip\" -d \"$temp_dir\"\nsudo mv \"$temp_dir/chromedriver\" /usr/local/bin/\nsudo rm -rf \"$temp_dir\"\n</code></pre>"},{"location":"output/","title":"Output In SiteWatch","text":"<p>Sitewatch has the capability to convey the results of its tests in a variety of ways: * To the console (stdout) * To a log file * To a CSV file * To email addresses</p> <p>The first three of these are by default enabled, and the last is up to the user to enable. The following sections describe each of these in detail.</p>"},{"location":"output/#console-output","title":"Console Output","text":"<p>SiteWatch provides a nice, human-readable summary of its results to the console. Here is an example of what that looks like:</p> <pre><code>   _________.__  __         __      __         __         .__     \n /   _____/|__|/  |_  ____/  \\    /  \\_____ _/  |_  ____ |  |__  \n \\_____  \\ |  \\   __\\/ __ \\   \\/\\/   /\\__  \\\\   __\\/ ___\\|  |  \\ \n /        \\|  ||  | \\  ___/\\        /  / __ \\|  | \\  \\___|   Y  \\\n/_______  /|__||__|  \\___  &gt;\\__/\\  /  (____  /__|  \\___  &gt;___|  /\n        \\/               \\/      \\/        \\/          \\/     \\/  \n SiteWatch has started.\n The output CSV will be written to output_csvs/site_watch-2023-06-14-13-02-23.csv\n The log file will be written to logs/site_watch-2023-06-14-13-02-23.log\nVerifying CSV File... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:00\n CSV file is valid.\n Site Availability Test passed on row 2.\n Facet Load Test passed on row 3.\n Collection Count Test passed on row 4.\n OpenSeaDragon Load Test passed on row 5.\n Mirador Load Test passed on row 6.\n AblePlayer Transcript Load Test passed on row 7.\n Mirador Load Test passed on row 8.\n Mirador Page Count Test failed on row 9. Please see log for more details.\nRunning Tests... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:17\n All tests have finished running.\n Results have been written to output_csvs/site_watch-2023-06-14-13-02-23.csv\n ```\n\n## Log File\nSiteWatch writes a log file to the `logs` directory. The name of the file is time-stamped to be unique. The name of the log file is the same as the name of the output CSV file (see below), but with a `.log` extension. For example, if the output CSV file is named `site_watch-2023-06-14-13-02-23.csv`, the log file will be named `site_watch-2023-06-14-13-02-23.log`. The log file serves to report important information about the results of tests and, if they failed, why they failed. Here is an example of what the log file for the above console output might look like:\n</code></pre> <p>INFO:root:SiteWatch has started. INFO:utils.csv_utils:CSV file is valid. INFO:test_suites.test_controller:Site Availability Test passed on row 2. INFO:test_suites.test_controller:Facet Load Test passed on row 3. INFO:test_suites.test_controller:Collection Count Test passed on row 4. INFO:test_suites.test_controller:OpenSeaDragon Load Test passed on row 5. INFO:test_suites.test_controller:Mirador Load Test passed on row 6. INFO:test_suites.test_controller:AblePlayer Transcript Load Test passed on row 7. INFO:test_suites.test_controller:Mirador Load Test passed on row 8. ERROR:test_suites.test_controller:Mirador Page Count Test failed on row 9. Mirador viewer does not have the expected number of thumbnails. Expected 1032, got 1034. INFO:root:All tests have finished running. INFO:root:Results have been written to output_csvs/site_watch-2023-06-14-13-02-23.csv</p> <pre><code>\n## Output CSV\nSiteWatch writes a CSV file to the `output_csvs` directory. The name of the file is time-stamped to be unique. The name of the output CSV file is the same as the name of the log file (see above), but with a `.csv` extension. For example, if the log file is named `site_watch-2023-06-14-13-02-23.log`, the output CSV file will be named `site_watch-2023-06-14-13-02-23.csv`. The output CSV is a copy of the input test data file, but with two columns appended: \n* `test_result`: The result of the test. This will be either `Passed` or `Failed`.\n* `total_time`: The total time it took to run the test, in seconds.\nFor example, if the original input data file looked like\n</code></pre> <p>url,test_type,description,test_input https://memory.digital.utsc.utoronto.ca/collection/33463,facet_load_test,test_subject_fact_exists,subject</p> <pre><code>the output CSV file would look like\n</code></pre> <p>url,test_type,description,test_input,test_result,total_time https://memory.digital.utsc.utoronto.ca/collection/33463,facet_load_test,test_subject_fact_exists,subject,Passed,0.39168238639831543 ```</p>"},{"location":"output/#email","title":"Email","text":"<p>SiteWatch has the capability to send an email to one or more email addresses when it finishes running, only in the event of error or failed test case. This is useful for notifying people when a test has failed. The email sent will contain a copy of the log and output CSV files. To enable this feature, see Email Settings.</p>"},{"location":"writing-test-data/","title":"The Test File","text":"<p>SiteWatch gets its second input from a CSV-like file containing the tests that SiteWatch is to run. This file specifies the URLs to test, the type of test to be run, expected values, and other information. For example, a test file might look like this:</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/collection/33463,collection_count_test,23591\nhttps://memory.digital.utsc.utoronto.ca/,site availability test,\n</code></pre>"},{"location":"writing-test-data/#required-test-file-columns","title":"Required Test File Columns","text":"<p>While the test file can contain any number of columns (for example, a description column), it must contain the following columns: * <code>url</code>: The URL to test. * <code>test_type</code>: The type of test to run. See Test Types below for a list of valid test types. * <code>input_data</code>: For some test types, this column is required, and is used to provide more information about the tests. The format of this column depends on the test type. See Test Types below for more information.</p>"},{"location":"writing-test-data/#test-types","title":"Test Types","text":"<p>SiteWatch supports the following test types:</p>"},{"location":"writing-test-data/#site_availability_test","title":"<code>site_availability_test</code>:","text":"<p>This test type checks to see if the site is available. It does not require any input data. It performs a <code>GET</code> request to the URL, and checks to see if the response code is indicative of a successful request (i.e., a 2xx response code). Then, it double-checks by scanning the response body for a string that indicates the site is not available. Then, it triple-checks by actually visiting the site in a browser and checking to see if it is available. If any of these checks fail, the test fails. Here is a sample test row for this test type:</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/,site_availability_test,\n</code></pre> <p>As you can see, the <code>input_data</code> column is empty, as this test type does not require any input data.</p>"},{"location":"writing-test-data/#facet_load_test","title":"<code>facet_load_test</code>:","text":"<p>This test type checks to see if a specific facet loads on a collection page. It requires the facet name to be passed as input. The test will then visit the page in a browser and check to see if the facet loads. Here is a sample test row for this test type that checks to see if the \"Subject\" facet loads on the page.</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/collection/33463,facet_load_test,Subject\n</code></pre> <p>By default, the test will check to see if the facet loads within 20 seconds.</p>"},{"location":"writing-test-data/#collection_count_test","title":"<code>collection_count_test</code>:","text":"<p>This test type checks to see if the number of items in a collection matches the expected number of items. It requires the expected number of items to be passed as input. The test will then visit the collection page in a browser and check to see if the number of items matches the expected number of items. Here is a sample test row for this test type that checks to see if the collection has 23,591 items.</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/collection/33463,collection_count_test,23591\n</code></pre> <p>By default, the test will check to see if the collection count matches the expected count within 20 seconds.</p>"},{"location":"writing-test-data/#openseadragon_load_test","title":"<code>openseadragon_load_test</code>:","text":"<p>This test type checks to see if the OpenSeadragon viewer loads on an item page. It does not require any input data. The test will then visit the item page in a browser and check to see if the OpenSeadragon viewer loads. Here is a sample test row for this test type:</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/61220/utsc16185,openseadragon_load_test,\n</code></pre> <p>By default, the test will check to see if the OpenSeadragon viewer loads within 20 seconds.</p>"},{"location":"writing-test-data/#mirador_viewer_load_test","title":"<code>mirador_viewer_load_test</code>:","text":"<p>This test type checks to see if the Mirador viewer loads on an item page. It does not require any input data. The test will then visit the item page in a browser and check to see if the Mirador viewer loads. Here is a sample test row for this test type:</p> <pre><code>url,test_type,input_data\nhttps://memory.digital.utsc.utoronto.ca/61220/utsc11802,mirador_viewer_load_test,4\n</code></pre> <p>By default, the test will check to see if the Mirador viewer loads within 40 seconds.</p>"},{"location":"writing-test-data/#mirador_page_count_test","title":"<code>mirador_page_count_test</code>:","text":"<p>This test type checks to see if the number of pages in a Mirador viewer matches the expected number of pages. It requires the expected number of pages to be passed as input. The test will then visit the item page in a browser and check to see if the number of pages matches the expected number of pages. Here is a sample test row for this test type that checks to see if the Mirador viewer has 1034 pages.</p> <pre><code>url,test_type,input_data\nhttps://tamil.digital.utsc.utoronto.ca/61220/utsc34439,mirador_page_count_test,1034\n</code></pre> <p>By default, the test will check to see if the Mirador viewer has the expected number of pages within 40 seconds.</p>"},{"location":"writing-test-data/#ableplayer_load_test","title":"<code>ableplayer_load_test</code>:","text":"<p>This test type checks to see if the AblePlayer viewer loads on an item page. It does not require any input data. The test will then visit the item page in a browser and check to see if the AblePlayer viewer loads. Here is a sample test row for this test type:</p> <pre><code>https://tamil.digital.utsc.utoronto.ca/61220/utsc34400,ableplayer_load_test,\n</code></pre> <p>By default, the test will check to see if the AblePlayer viewer loads within 20 seconds.</p>"},{"location":"writing-test-data/#ableplayer_transcript_load_test","title":"<code>ableplayer_transcript_load_test</code>:","text":"<p>This test type checks to see if the AblePlayer transcript loads on an item page. It does not require any input data. The test will then visit the item page in a browser and check to see if the AblePlayer transcript loads. Here is a sample test row for this test type:</p> <pre><code>https://tamil.digital.utsc.utoronto.ca/61220/utsc34400,ableplayer_transcript_load_test,\n</code></pre> <p>By default, the test will check to see if the AblePlayer transcript loads within 20 seconds.</p>"}]}